
* Overview

This repository contains a Python implementation of the Weighted
Ensemble (WE) method for sampling rare events from probability
distributions generated by arbitrary Markov processes.

* References
  - [[http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2830257/][Huber and Kim. Biophys. J. 70, 97 (1996).]]
  - [[http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2830257/][Zhang, Jasnow and Zuckerman.  J Chem Phys. 2010 February 7; 132(5): 054107.]] 
  - [[http://scitation.aip.org/content/aip/journal/jcp/139/11/10.1063/1.4821167][Donovan, RM et al.  J. Chem. Phys. 139, 115105 (2013)]]
  See also:

  - [[chong.chem.pitt.edu/WESTPA/we-overview.pdfâ€Ž][Zuckerman, DM.  Overview of Weighted Ensemble Simulation.]]

  for an overview.

* Installation

To put the =we= library where Python can find it, clone the repository
and execute the following from the top-level directory:

: sudo python setup.py install

* Usage

To illustrate the use of the library with a simple test case, consider
the following question: for the unbiased random walk on the 1-D
lattice, what is the probability that a particle beginning at x=0 when
t=0 will arrive at x=100 when t=100?  Clearly, it can be shown
analytically that this probability is 1/2^100.  It would be extremely
difficult to estimate this quantity with conventional simulation, but
with WE the problem becomes tractable.  

Define the transition kernel as follows:

: def q(x):
:     return x- 1 if random.random() < .5 else x + 1

Bin every lattice point in [-100,100]:

: bins = range(-100,101)

The projection function is just the identity function here:

: f = lambda x:x

Initialize 100 trajectories at the origin:
: init_states = [0] * 100

Set 100 trajectories per bin:
: M = 100

And run for 100 timesteps, resorting the bins every timestep:
: timesteps = 100
: tau = 1

Run the simulation:
: final_bins = weighted_ensemble(q, f, init_states, bins, M, tau, timesteps)

And sum the probabilities of all the trajectories in the desired bin:

: sum(p for (s,p) in final_bins[-1])

* Acknowledgements

  Thanks to Rory Donovan for introducing me to the algorithm and for
  helpful comments on implementation.  All bugs, of course, are due to me.

** A note on the preferred nomenclature

   WE is a powerful yet very general sampling method, hence "the royal
   WE".  You know, the editorial...
